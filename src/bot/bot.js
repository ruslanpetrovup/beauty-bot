const { Telegraf, session, Markup } = require('telegraf');
const config = require('../config/config');
const stage = require('./scenes');
const { registerClientHandlers } = require('./handlers/clientHandlers');
const { registerMasterHandlers } = require('./handlers/masterHandlers');
const { registerAppointmentHandlers } = require('./handlers/appointmentHandlers');
const { registerPaymentHandlers } = require('./handlers/paymentHandlers');
const { registerBusinessManagementHandlers } = require('./handlers/businessManagementHandlers');
const { registerClientManagementHandlers } = require('./handlers/masterClientManagementHandlers');
const userService = require('../services/userService');
const { getMainMenuKeyboard } = require('./keyboards');
const { registerCommonHandlers } = require('./handlers/commonHandlers');

const bot = new Telegraf(config.BOT_TOKEN);

// Middleware
bot.use(session());
bot.use(stage.middleware());

// –ë–∞–∑–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ /start
bot.command('start', async (ctx) => {
    try {
        const user = await userService.getUserByTelegramId(ctx.from.id);
        if (user) {
            const currentRole = await userService.getUserRole(ctx.from.id);
            ctx.session = ctx.session || {};
            ctx.session.currentRole = currentRole;
            await ctx.reply('–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!', getMainMenuKeyboard(currentRole));
        } else {
            await ctx.reply(
                '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:',
                Markup.inlineKeyboard([
                    [{ text: 'üë§ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç', callback_data: 'register_client' }],
                    [{ text: 'üíº –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –º–∞—Å—Ç–µ—Ä', callback_data: 'register_master' }]
                ])
            );
        }
    } catch (error) {
        console.error('Error in start command:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
bot.action('register_client', async (ctx) => {
    try {
        await ctx.answerCbQuery();
        await ctx.scene.enter('clientRegistration');
    } catch (error) {
        console.error('Error entering client registration scene:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

bot.action('register_master', async (ctx) => {
    try {
        await ctx.answerCbQuery();
        await ctx.scene.enter('masterRegistration');
    } catch (error) {
        console.error('Error entering master registration scene:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Å–º–µ–Ω—ã —Ä–æ–ª–∏
bot.hears('üîÑ –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å', async (ctx) => {
    try {
        await ctx.scene.enter('switchRole');
    } catch (error) {
        console.error('Error switching role:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–æ–ª–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
});

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
registerClientHandlers(bot);
registerMasterHandlers(bot);
registerCommonHandlers(bot);
registerAppointmentHandlers(bot);
registerPaymentHandlers(bot);
registerBusinessManagementHandlers(bot);
registerClientManagementHandlers(bot);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err, ctx) => {
    console.error(`Error for ${ctx.updateType}:`, err);
    ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
});

module.exports = { bot }; 