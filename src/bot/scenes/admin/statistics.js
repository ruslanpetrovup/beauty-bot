const { Scenes } = require('telegraf');
const { Master, Client, Appointment } = require('../../../db/models');
const moment = require('moment');
const { Op } = require('sequelize');
const sequelize = require('../../../db');

const statistics = new Scenes.WizardScene(
  'statistics',
  async (ctx) => {
    await showStatisticsMenu(ctx);
    return ctx.wizard.next();
  }
);

// –ü–æ–∫–∞–∑ –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
async function showStatisticsMenu(ctx) {
  await ctx.reply('–ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', {
    reply_markup: {
      keyboard: [
        ['üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ú–∞—Å—Ç–µ—Ä–æ–≤', 'üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ö–ª–∏–µ–Ω—Ç–æ–≤'],
        ['üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞', 'üìÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–Ω–∏'],
        ['üëë –¢–æ–ø –º–∞—Å—Ç–µ—Ä–æ–≤', 'üõ† –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ª—É–≥'],
        ['üìä –ö–æ–Ω–≤–µ—Ä—Å–∏—è –∑–∞–ø–∏—Å–µ–π'],
        ['‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']
      ],
      resize_keyboard: true,
      one_time_keyboard: false
    }
  });
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
statistics.hears('üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ú–∞—Å—Ç–µ—Ä–æ–≤', async (ctx) => {
  try {
    const count = await Master.count();
    await ctx.reply(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤: ${count}`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –º–∞—Å—Ç–µ—Ä–æ–≤:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
});

statistics.hears('üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ö–ª–∏–µ–Ω—Ç–æ–≤', async (ctx) => {
  try {
    const count = await Client.count();
    await ctx.reply(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤: ${count}`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∫–ª–∏–µ–Ω—Ç–æ–≤:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
});

statistics.hears('üìà –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞', async (ctx) => {
  try {
    const today = moment().startOf('day');
    const tomorrow = moment(today).add(1, 'days');

    const appointmentsCount = await Appointment.count({
      where: {
        createdAt: {
          [Op.between]: [today.toDate(), tomorrow.toDate()]
        }
      }
    });

    await ctx.reply(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞: ${appointmentsCount}`);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
});

statistics.hears('üìÖ –ê–∫—Ç–∏–≤–Ω—ã–µ –¥–Ω–∏', async (ctx) => {
  try {
    const appointments = await Appointment.findAll({
      attributes: [
        [sequelize.fn('date_trunc', 'day', sequelize.col('createdAt')), 'date'],
        [sequelize.fn('count', '*'), 'count']
      ],
      group: [sequelize.fn('date_trunc', 'day', sequelize.col('createdAt'))],
      order: [[sequelize.fn('count', '*'), 'DESC']],
      limit: 5
    });

    const daysStats = appointments.map(app => {
      const date = moment(app.getDataValue('date'));
      return `${date.format('DD.MM.YYYY')} (${app.getDataValue('count')} –∑–∞–ø–∏—Å–µ–π)`;
    });

    if (daysStats.length === 0) {
      await ctx.reply('üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–Ω–µ–π');
    } else {
      await ctx.reply('üìä –°–∞–º—ã–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–Ω–∏:\n\n' + daysStats.join('\n'));
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Å—á–µ—Ç–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–Ω–µ–π:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
});

statistics.hears('üëë –¢–æ–ø –º–∞—Å—Ç–µ—Ä–æ–≤', async (ctx) => {
  try {
    const topMasters = await Appointment.findAll({
      attributes: [
        'masterId',
        [sequelize.fn('COUNT', '*'), 'appointmentCount']
      ],
      include: [{
        model: Master,
        attributes: ['name']
      }],
      group: ['masterId', 'Master.id', 'Master.name'],
      order: [[sequelize.fn('COUNT', '*'), 'DESC']],
      limit: 5
    });

    const response = topMasters.map((master, index) => 
      `${index + 1}. ${master.Master.name}: ${master.getDataValue('appointmentCount')} –∑–∞–ø–∏—Å–µ–π`
    ).join('\n');

    await ctx.reply('üìä –¢–æ–ø-5 —Å–∞–º—ã—Ö –≤–æ—Å—Ç—Ä–µ–±–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤:\n\n' + response);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞ –º–∞—Å—Ç–µ—Ä–æ–≤:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
});

statistics.hears('üõ† –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —É—Å–ª—É–≥', async (ctx) => {
  try {
    const servicesStats = await Appointment.findAll({
      attributes: [
        'serviceType',
        [sequelize.fn('COUNT', '*'), 'count']
      ],
      group: ['serviceType'],
      order: [[sequelize.fn('COUNT', '*'), 'DESC']]
    });

    const response = servicesStats.map(service => 
      `${service.serviceType}: ${service.getDataValue('count')} –∑–∞–ø–∏—Å–µ–π`
    ).join('\n');

    await ctx.reply('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —É—Å–ª—É–≥–∞–º:\n\n' + response);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —É—Å–ª—É–≥:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
});

statistics.hears('üìä –ö–æ–Ω–≤–µ—Ä—Å–∏—è –∑–∞–ø–∏—Å–µ–π', async (ctx) => {
  try {
    const totalAppointments = await Appointment.count();
    const completedAppointments = await Appointment.count({
      where: { status: 'completed' }
    });
    const cancelledAppointments = await Appointment.count({
      where: { status: 'cancelled' }
    });

    const conversionRate = ((completedAppointments / totalAppointments) * 100).toFixed(2);
    const cancellationRate = ((cancelledAppointments / totalAppointments) * 100).toFixed(2);

    const response = `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏:\n\n` +
      `–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${totalAppointments}\n` +
      `–ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${completedAppointments} (${isNaN(conversionRate) ? 0 : conversionRate}%)\n` +
      `–û—Ç–º–µ–Ω–µ–Ω–æ: ${cancelledAppointments} (${isNaN(cancellationRate) ? 0 : cancellationRate}%)`;

    await ctx.reply(response);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
  }
});

statistics.hears('‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é', async (ctx) => {
  await ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω–∫—É! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", {
    reply_markup: {
      keyboard: [
        ['üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'],
      ],
      resize_keyboard: true,
      one_time_keyboard: false
    }
  });
  return ctx.scene.leave();
});

module.exports = statistics; 