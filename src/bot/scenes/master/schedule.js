const { Scenes } = require('telegraf');
const { Schedule, Master } = require('../../../db/models');
const moment = require('moment');
const { Op } = require('sequelize');

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
async function showScheduleMenu(ctx) {
  await ctx.reply('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º:', {
    reply_markup: {
      keyboard: [
        ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è', 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'],
        ['üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']
      ],
      resize_keyboard: true
    }
  });
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async function showMainMenu(ctx) {
  await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', {
    reply_markup: {
      keyboard: [
        ['üíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏', 'üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º'],
        ['üìù –ú–æ–∏ –∑–∞–ø–∏—Å–∏', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è'],
        ['üì¢ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É']
      ],
      resize_keyboard: true
    }
  });
}

// –°–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞ÔøΩÔøΩ–∏–µ–º
const scheduleManagement = new Scenes.WizardScene(
  'scheduleManagement',
  // –®–∞–≥ 1: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
  async (ctx) => {
    await showScheduleMenu(ctx);
    return ctx.wizard.next();
  }
);

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—Å–µ–π —Å—Ü–µ–Ω—ã
scheduleManagement.on('text', async (ctx) => {
  const text = ctx.message.text;
  
  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –Ω–∏–∂–Ω–µ–≥–æ –±–∞—Ä–∞
  switch (text) {
    case '‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è':
      await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (—Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì):', {
        reply_markup: { remove_keyboard: true }
      });
      ctx.wizard.state.action = 'adding_date';
      return;

    case 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
      await showScheduleList(ctx);
      return;

    case 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é':
      await showMainMenu(ctx);
      return ctx.scene.leave();
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
  if (ctx.wizard.state.action === 'adding_date') {
    const date = moment(text, 'DD.MM.YYYY');
    if (!date.isValid()) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì');
      return;
    }
    ctx.wizard.state.date = date.format('YYYY-MM-DD');
    ctx.wizard.state.action = 'adding_time_start';
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (—Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú):');
    return;
  }

  if (ctx.wizard.state.action === 'adding_time_start') {
    const time = moment(text, 'HH:mm');
    if (!time.isValid()) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú');
      return;
    }
    ctx.wizard.state.timeStart = time.format('HH:mm');
    ctx.wizard.state.action = 'adding_time_end';
    await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú):');
    return;
  }

  if (ctx.wizard.state.action === 'adding_time_end') {
    const timeEnd = moment(text, 'HH:mm');
    if (!timeEnd.isValid()) {
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú');
      return;
    }

    try {
      const master = await Master.findOne({
        where: { telegramId: ctx.from.id.toString() }
      });

      await Schedule.create({
        masterId: master.id,
        date: ctx.wizard.state.date,
        timeStart: ctx.wizard.state.timeStart,
        timeEnd: timeEnd.format('HH:mm')
      });

      await ctx.reply('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!');
      await showScheduleMenu(ctx);
      return ctx.wizard.back();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.');
      await showScheduleMenu(ctx);
      return ctx.wizard.back();
    }
  }
});

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
async function showScheduleList(ctx) {
  try {
    const master = await Master.findOne({
      where: { telegramId: ctx.from.id.toString() }
    });

    const schedules = await Schedule.findAll({
      where: {
        masterId: master.id,
        date: {
          [Op.gte]: moment().startOf('day').toDate()
        }
      },
      order: [['date', 'ASC']]
    });

    if (schedules.length === 0) {
      await ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.');
    } else {
      for (const schedule of schedules) {
        await ctx.reply(
          `üìÖ –î–∞—Ç–∞: ${moment(schedule.date).format('DD.MM.YYYY')}\n` +
          `‚è∞ –í—Ä–µ–º—è: ${schedule.timeStart} - ${schedule.timeEnd}`,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  { text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: `edit_schedule_${schedule.id}` },
                  { text: 'üóë –£–¥–∞–ª–∏—Ç—å', callback_data: `delete_schedule_${schedule.id}` }
                ]
              ]
            }
          }
        );
      }
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∏–∂–Ω–µ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ —Å–ø–∏—Å–∫–∞
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
      reply_markup: {
        keyboard: [
          ['‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤—Ä–µ–º—è', 'üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'],
          ['üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']
        ],
        resize_keyboard: true
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.');
    await showScheduleMenu(ctx);
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async function showMainMenu(ctx) {
  await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', {
    reply_markup: {
      inline_keyboard: [
        [{ text: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏', callback_data: 'setup_services' }],
        [{ text: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º', callback_data: 'setup_schedule' }],
        [{ text: '–ú–æ–∏ –∑–∞–ø–∏—Å–∏', callback_data: 'view_appointments' }],
        [{ text: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è', callback_data: 'profile_settings' }],
        [{ text: '–°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', callback_data: 'create_broadcast' }]
      ]
    }
  });
}

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
scheduleManagement.action(/^edit_schedule_(\d+)$/, async (ctx) => {
  const scheduleId = ctx.match[1];
  try {
    const schedule = await Schedule.findByPk(scheduleId);
    if (!schedule) {
      await ctx.reply('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return await showScheduleList(ctx);
    }

    await ctx.reply(
      `–¢–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n` +
      `üìÖ –î–∞—Ç–∞: ${moment(schedule.date).format('DD.MM.YYYY')}\n` +
      `‚è∞ –í—Ä–µ–º—è: ${schedule.timeStart} - ${schedule.timeEnd}`,
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É', callback_data: `edit_date_${scheduleId}` },
              { text: '‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞', callback_data: `edit_start_${scheduleId}` }
            ],
            [
              { text: '‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è', callback_data: `edit_end_${scheduleId}` },
              { text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'back_to_schedule' }
            ]
          ]
        }
      }
    );
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    await showScheduleList(ctx);
  }
});

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª–µ–π —Ä–µ–¥–∞–∫—Ç–∏—ÄÔøΩÔøΩ–≤–∞–Ω–∏—è
scheduleManagement.action(/^edit_(date|start|end)_(\d+)$/, async (ctx) => {
  await ctx.answerCbQuery().catch(console.error);
  const [, field, scheduleId] = ctx.match;
  ctx.wizard.state.editingScheduleId = scheduleId;
  ctx.wizard.state.editingField = field;

  const prompts = {
    date: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É (—Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì):',
    start: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (—Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú):',
    end: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (—Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú):'
  };

  await ctx.reply(prompts[field], {
    reply_markup: { remove_keyboard: true }
  });
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
scheduleManagement.on('text', async (ctx) => {
  if (ctx.wizard.state.editingField && ctx.wizard.state.editingScheduleId) {
    const field = ctx.wizard.state.editingField;
    const scheduleId = ctx.wizard.state.editingScheduleId;

    try {
      const schedule = await Schedule.findByPk(scheduleId);
      if (!schedule) {
        await ctx.reply('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
        return await showScheduleList(ctx);
      }

      let value;
      let isValid = true;

      switch (field) {
        case 'date':
          const date = moment(ctx.message.text, 'DD.MM.YYYY');
          if (!date.isValid()) {
            isValid = false;
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì');
          } else {
            value = date.format('YYYY-MM-DD');
          }
          break;
        case 'start':
        case 'end':
          const time = moment(ctx.message.text, 'HH:mm');
          if (!time.isValid()) {
            isValid = false;
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú');
          } else {
            value = time.format('HH:mm');
          }
          break;
      }

      if (!isValid) return;

      const updateData = {};
      if (field === 'date') updateData.date = value;
      if (field === 'start') updateData.timeStart = value;
      if (field === 'end') updateData.timeEnd = value;

      try {
        await Schedule.update(updateData, { where: { id: scheduleId } });
        await ctx.reply(`–ü–æ–ª–µ ${field} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ`);
        await showScheduleList(ctx);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
        await showScheduleList(ctx);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
      await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
      await showScheduleList(ctx);
    }
  }
});

scheduleManagement.action(/^delete_schedule_(\d+)$/, async (ctx) => {
  try {
    const scheduleId = ctx.match[1];
    await Schedule.destroy({ where: { id: scheduleId } });
    await ctx.reply('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ');
    await showScheduleList(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è');
  }
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É
scheduleManagement.action('back_to_schedule', async (ctx) => {
  await showScheduleList(ctx);
});

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
scheduleManagement.middleware(async (ctx, next) => {
  console.log('–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:', ctx.message?.text);
  await next();
});

module.exports = scheduleManagement; 