const { Scenes } = require('telegraf');
const { Service, Master } = require('../../../db/models');

const serviceManagement = new Scenes.WizardScene(
  'serviceManagement',
  // –®–∞–≥ 1: –ü–æ–∫–∞–∑ –º–µ–Ω—é —É—Å–ª—É–≥
  async (ctx) => {
    await showServiceMenu(ctx);
    return ctx.wizard.next();
  },
  // –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ–π—Å—Ç–≤–∏–π –º–µ–Ω—é
  async (ctx) => {
    if (ctx.message?.text) {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
      const text = ctx.message.text;
      
      if (text === '‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É') {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        ctx.wizard.state.editingServiceId = null;
        ctx.wizard.state.editingField = null;
        
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:', {
          reply_markup: { remove_keyboard: true }
        });
        ctx.wizard.state.action = 'adding_name';
        ctx.wizard.state.serviceData = {};
        return ctx.wizard.next();
      }
      
      if (text === 'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ª—É–≥–∏') {
        await showServicesList(ctx);
        return;
      }
      
      if (text === 'üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é') {
        await showMainMenu(ctx);
        return ctx.scene.leave();
      }
      
      if (text === 'üîô –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º') {
        await showServicesList(ctx);
        return;
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      if (text.startsWith('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å ')) {
        const serviceId = text.split(' ')[2];
        await showEditMenu(ctx, serviceId);
        return;
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
      if (text.startsWith('üóë –£–¥–∞–ª–∏—Ç—å ')) {
        const serviceId = text.split(' ')[2];
        await handleDeleteService(ctx, serviceId);
        return;
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query
    if (ctx.callbackQuery) {
      await ctx.answerCbQuery().catch(console.error);
      const action = ctx.callbackQuery.data;

      if (action === 'back_to_services') {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ —Å–ø–∏—Å–∫—É
        ctx.wizard.state.editingServiceId = null;
        ctx.wizard.state.editingField = null;
        await showServicesList(ctx);
        return;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏
      if (action.startsWith('delete_service_')) {
        const serviceId = action.split('_')[2];
        await handleDeleteService(ctx, serviceId);
        return;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏
      if (action.startsWith('edit_service_')) {
        const serviceId = action.split('_')[2];
        await showEditMenu(ctx, serviceId);
        return;
      }

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π
      if (action.startsWith('edit_name_') || 
          action.startsWith('edit_description_') || 
          action.startsWith('edit_price_') || 
          action.startsWith('edit_duration_')) {
        const [, field, serviceId] = action.split('_');
        ctx.wizard.state.editingServiceId = serviceId;
        ctx.wizard.state.editingField = field;
        
        const prompts = {
          name: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:',
          description: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:',
          price: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —É—Å–ª—É–≥–∏:',
          duration: '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö):'
        };
        
        await ctx.reply(prompts[field]);
        return ctx.wizard.next();
      }
    }
  },
  // –®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
  async (ctx) => {
    if (!ctx.message?.text) return;

    // –ï—Å–ª–∏ —ç—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —É—Å–ª—É–≥–∏
    if (ctx.wizard.state.editingServiceId) {
      try {
        const service = await Service.findByPk(ctx.wizard.state.editingServiceId);
        if (!service) {
          await ctx.reply('–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
          return await showServicesList(ctx);
        }

        const field = ctx.wizard.state.editingField;
        let value = ctx.message.text;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (field === 'price') {
          value = parseFloat(value);
          if (isNaN(value) || value < 0) {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É');
            return;
          }
        } else if (field === 'duration') {
          value = parseInt(value);
          if (isNaN(value) || value <= 0) {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å');
            return;
          }
        }

        const updateData = {};
        updateData[field] = value;
        await service.update(updateData);
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        ctx.wizard.state.editingServiceId = null;
        ctx.wizard.state.editingField = null;
        
        await ctx.reply('–£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!');
        await showServicesList(ctx);
        return ctx.wizard.back();
      } catch (error) {
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–µ
        ctx.wizard.state.editingServiceId = null;
        ctx.wizard.state.editingField = null;
        
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏');
        await showServicesList(ctx);
        return ctx.wizard.back();
      }
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π —É—Å–ª—É–≥–∏
    const action = ctx.wizard.state.action;
    switch (action) {
      case 'adding_name':
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if (ctx.wizard.state.editingServiceId) {
          ctx.wizard.state.editingServiceId = null;
          ctx.wizard.state.editingField = null;
        }
        
        ctx.wizard.state.serviceData.name = ctx.message.text;
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:', {
          reply_markup: { remove_keyboard: true }
        });
        ctx.wizard.state.action = 'adding_description';
        return;

      case 'adding_description':
        ctx.wizard.state.serviceData.description = ctx.message.text;
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —É—Å–ª—É–≥–∏:', {
          reply_markup: { remove_keyboard: true }
        });
        ctx.wizard.state.action = 'adding_price';
        return;

      case 'adding_price':
        const price = parseFloat(ctx.message.text);
        if (isNaN(price) || price < 0) {
          await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Ü–µ–Ω—É', {
            reply_markup: { remove_keyboard: true }
          });
          return;
        }
        ctx.wizard.state.serviceData.price = price;
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö):');
        ctx.wizard.state.action = 'adding_duration';
        return;

      case 'adding_duration':
        const duration = parseInt(ctx.message.text);
        if (isNaN(duration) || duration <= 0) {
          await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å');
          return;
        }
        ctx.wizard.state.serviceData.duration = duration;

        try {
          const master = await Master.findOne({
            where: { telegramId: ctx.from.id.toString() }
          });

          await Service.create({
            ...ctx.wizard.state.serviceData,
            masterId: master.id
          });

          await ctx.reply('–£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!');
          await showServicesList(ctx);
          return ctx.wizard.back();
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏:', error);
          await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏');
          await showServicesList(ctx);
          return ctx.wizard.back();
        }
    }
  }
);

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function showEditMenu(ctx, serviceId) {
  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:', {
    reply_markup: {
      inline_keyboard: [
        [
          { text: '–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ', callback_data: `edit_name_${serviceId}` },
          { text: '–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ', callback_data: `edit_description_${serviceId}` }
        ],
        [
          { text: '–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É', callback_data: `edit_price_${serviceId}` },
          { text: '–ò–∑–º–µ–Ω–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', callback_data: `edit_duration_${serviceId}` }
        ],
        [{ text: '–ù–∞–∑–∞–¥', callback_data: 'back_to_services' }]
      ]
    }
  });
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏
async function handleDeleteService(ctx, serviceId) {
  try {
    await Service.destroy({ where: { id: serviceId } });
    await ctx.reply('–£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞');
    await showServicesList(ctx);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏');
    await showServiceMenu(ctx);
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async function showServiceMenu(ctx) {
  await ctx.reply('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏:', {
    reply_markup: {
      keyboard: [
        ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É', 'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ª—É–≥–∏'],
        ['üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']
      ],
      resize_keyboard: true
    }
  });
}

async function showMainMenu(ctx) {
  await ctx.reply('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', {
    reply_markup: {
      keyboard: [
        ['üíº –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏', 'üìÖ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º'],
        ['üìù –ú–æ–∏ –∑–∞–ø–∏—Å–∏', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è'],
        ['üì¢ –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É']
      ],
      resize_keyboard: true
    }
  });
}

async function showServicesList(ctx) {
  try {
    const master = await Master.findOne({
      where: { telegramId: ctx.from.id.toString() }
    });

    const services = await Service.findAll({
      where: { masterId: master.id }
    });

    if (services.length === 0) {
      await ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —É—Å–ª—É–≥');
    } else {
      for (const service of services) {
        await ctx.reply(
          `–ù–∞–∑–≤–∞–Ω–∏–µ: ${service.name}\n` +
          `–û–ø–∏—Å–∞–Ω–∏–µ: ${service.description}\n` +
          `–¶–µ–Ω–∞: ${service.price}‚ÇΩ\n` +
          `–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${service.duration} –º–∏–Ω`,
          {
            reply_markup: {
              inline_keyboard: [
                [
                  { text: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data: `edit_service_${service.id}` },
                  { text: 'üóë –£–¥–∞–ª–∏—Ç—å', callback_data: `delete_service_${service.id}` }
                ]
              ]
            }
          }
        );
      }
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∏–∂–Ω–µ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
      reply_markup: {
        keyboard: [
          ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É', 'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ª—É–≥–∏'],
          ['üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é']
        ],
        resize_keyboard: true
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥:', error);
    await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥');
    await showServiceMenu(ctx);
  }
}

module.exports = serviceManagement;