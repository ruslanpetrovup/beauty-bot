const { Scenes, Markup } = require('telegraf');
const userService = require('../../services/userService');
const { getMainMenuKeyboard } = require('../keyboards');

const clientRegistrationScene = new Scenes.WizardScene(
    'clientRegistration',
    async (ctx) => {
        ctx.session.registration = { userType: 'client' };
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:');
        return ctx.wizard.next();
    },
    // –®–∞–≥ 1: –ó–∞–ø—Ä–æ—Å –∏–º–µ–Ω–∏
    async (ctx) => {
        await ctx.reply(
            '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:',
            Markup.keyboard([['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é']]).resize()
        );
        return ctx.wizard.next();
    },
    // –®–∞–≥ 2: –ó–∞–ø—Ä–æ—Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    async (ctx) => {
        if (ctx.message.text === '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é') {
            await ctx.reply(
                '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.',
                getMainMenuKeyboard('client')
            );
            return ctx.scene.leave();
        }

        ctx.scene.state.name = ctx.message.text;
        await ctx.reply(
            '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:',
            Markup.keyboard([
                [Markup.button.contactRequest('üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞')],
                ['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é']
            ]).resize()
        );
        return ctx.wizard.next();
    },
    // –®–∞–≥ 3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    async (ctx) => {
        if (ctx.message.text === '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é') {
            await ctx.reply(
                '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.',
                getMainMenuKeyboard('client')
            );
            return ctx.scene.leave();
        }

        try {
            const phone = ctx.message.contact ? ctx.message.contact.phone_number : ctx.message.text;
            
            await userService.createUser({
                telegramId: ctx.from.id,
                name: ctx.scene.state.name,
                phone: phone,
                userType: 'client'
            });

            await ctx.reply(
                '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞.',
                getMainMenuKeyboard('client')
            );
            return ctx.scene.leave();
        } catch (error) {
            console.error('Error during registration:', error);
            await ctx.reply(
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                getMainMenuKeyboard('client')
            );
            return ctx.scene.leave();
        }
    }
);

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
clientRegistrationScene.hears('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', async (ctx) => {
    await ctx.reply(
        '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.',
        getMainMenuKeyboard('client')
    );
    return ctx.scene.leave();
});

module.exports = clientRegistrationScene;