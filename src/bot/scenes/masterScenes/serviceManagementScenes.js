const { Scenes, Markup } = require('telegraf');
const serviceService = require('../../../services/serviceService');
const { getMainMenuKeyboard } = require('../../keyboards');

// –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤–∏–º –æ–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å—Ü–µ–Ω
const handleReturnToMainMenu = async (ctx) => {
    try {
        await ctx.reply('–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', getMainMenuKeyboard('master'));
        return ctx.scene.leave();
    } catch (error) {
        console.error('Error returning to main menu:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
};

const addServiceScene = new Scenes.WizardScene(
    'addService',
    async (ctx) => {
        if (ctx.message?.text === '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') {
            return handleReturnToMainMenu(ctx);
        }
        ctx.session = ctx.session || {};
        ctx.session.currentRole = 'master';
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:');
        return ctx.wizard.next();
    },
    async (ctx) => {
        if (ctx.message?.text === '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') {
            return handleReturnToMainMenu(ctx);
        }
        ctx.scene.state.name = ctx.message.text;
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏ (–≤ –≥—Ä–Ω):');
        return ctx.wizard.next();
    },
    async (ctx) => {
        if (ctx.message?.text === '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') {
            return handleReturnToMainMenu(ctx);
        }
        if (isNaN(ctx.message.text)) {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.');
            return;
        }
        ctx.scene.state.price = parseFloat(ctx.message.text);
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö):');
        return ctx.wizard.next();
    },
    async (ctx) => {
        if (ctx.message?.text === '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') {
            return handleReturnToMainMenu(ctx);
        }
        if (isNaN(ctx.message.text)) {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.');
            return;
        }
        try {
            const service = await serviceService.createService({
                masterId: ctx.from.id,
                name: ctx.scene.state.name,
                price: ctx.scene.state.price,
                duration: parseInt(ctx.message.text)
            });
            
            await ctx.reply(
                '–£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!',
                Markup.keyboard([
                    ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É'],
                    ['üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥–∏'],
                    ['‚ùå –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É'],
                    ['‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                ]).resize()
            );
        } catch (error) {
            console.error('Error adding service:', error);
            await ctx.reply(
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏.',
                Markup.keyboard([
                    ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É'],
                    ['üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥–∏'],
                    ['‚ùå –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É'],
                    ['‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                ]).resize()
            );
        }
        return ctx.scene.leave();
    }
);

const editServicesScene = new Scenes.WizardScene(
    'editServices',
    async (ctx) => {
        if (ctx.message?.text === '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') {
            return handleReturnToMainMenu(ctx);
        }
        try {
            const services = await serviceService.getMasterServices(ctx.from.id);
            
            if (services.length === 0) {
                await ctx.reply(
                    '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—Å–ª—É–≥.',
                    Markup.keyboard([
                        ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É'],
                        ['üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥–∏'],
                        ['‚ùå –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É'],
                        ['‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                    ]).resize()
                );
                return ctx.scene.leave();
            }

            const keyboard = services.map(service => ([{
                text: `${service.name} - ${service.price} –≥—Ä–Ω`,
                callback_data: `edit_service_${service.id}`
            }]));

            await ctx.reply(
                '–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:',
                Markup.inlineKeyboard(keyboard)
            );
            return ctx.wizard.next();
        } catch (error) {
            console.error('Error getting services:', error);
            await ctx.reply(
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥.',
                Markup.keyboard([
                    ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É'],
                    ['üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥–∏'],
                    ['‚ùå –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É'],
                    ['‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                ]).resize()
            );
            return ctx.scene.leave();
        }
    },
    async (ctx) => {
        if (ctx.message?.text === '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') {
            return handleReturnToMainMenu(ctx);
        }
        if (!ctx.callbackQuery) return;

        const serviceId = ctx.callbackQuery.data.split('_')[2];
        ctx.scene.state.serviceId = serviceId;

        await ctx.reply(
            '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?',
            Markup.keyboard([
                ['üìù –ù–∞–∑–≤–∞–Ω–∏–µ'],
                ['üí∞ –¶–µ–Ω—É'],
                ['‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å'],
                ['‚ùå –û—Ç–º–µ–Ω–∞']
            ]).resize()
        );
        return ctx.wizard.next();
    },
    async (ctx) => {
        if (ctx.message?.text === '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') {
            return handleReturnToMainMenu(ctx);
        }
        if (ctx.message.text === '‚ùå –û—Ç–º–µ–Ω–∞') {
            await ctx.reply(
                '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.',
                Markup.keyboard([
                    ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É'],
                    ['üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥–∏'],
                    ['‚ùå –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É'],
                    ['‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                ]).resize()
            );
            return ctx.scene.leave();
        }

        ctx.scene.state.editField = {
            'üìù –ù–∞–∑–≤–∞–Ω–∏–µ': 'name',
            'üí∞ –¶–µ–Ω—É': 'price',
            '‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å': 'duration'
        }[ctx.message.text];

        await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è "${ctx.message.text}"`);
        return ctx.wizard.next();
    },
    async (ctx) => {
        if (ctx.message?.text === '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') {
            return handleReturnToMainMenu(ctx);
        }
        try {
            const updates = {};
            updates[ctx.scene.state.editField] = 
                ctx.scene.state.editField === 'price' || ctx.scene.state.editField === 'duration'
                    ? parseFloat(ctx.message.text)
                    : ctx.message.text;

            await serviceService.updateService(
                ctx.scene.state.serviceId,
                ctx.from.id,
                updates
            );

            await ctx.reply(
                '–£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!',
                Markup.keyboard([
                    ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É'],
                    ['üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥–∏'],
                    ['‚ùå –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É'],
                    ['‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                ]).resize()
            );
        } catch (error) {
            console.error('Error updating service:', error);
            await ctx.reply(
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏.',
                Markup.keyboard([
                    ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É'],
                    ['üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥–∏'],
                    ['‚ùå –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É'],
                    ['‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                ]).resize()
            );
        }
        return ctx.scene.leave();
    }
);

const deleteServiceScene = new Scenes.WizardScene(
    'deleteService',
    async (ctx) => {
        if (ctx.message?.text === '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') {
            return handleReturnToMainMenu(ctx);
        }
        try {
            const services = await serviceService.getMasterServices(ctx.from.id);
            
            if (services.length === 0) {
                await ctx.reply(
                    '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —É—Å–ª—É–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.',
                    Markup.keyboard([
                        ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É'],
                        ['üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥–∏'],
                        ['‚ùå –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É'],
                        ['‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                    ]).resize()
                );
                return ctx.scene.leave();
            }

            const keyboard = services.map(service => ([{
                text: `${service.name} - ${service.price} –≥—Ä–Ω`,
                callback_data: `delete_service_${service.master_service_id}`
            }]));

            keyboard.push([{
                text: '‚ùå –û—Ç–º–µ–Ω–∞',
                callback_data: 'cancel_delete'
            }]);

            await ctx.reply(
                '–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:',
                Markup.inlineKeyboard(keyboard)
            );

            return ctx.wizard.next();
        } catch (error) {
            console.error('Error getting services:', error);
            await ctx.reply(
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥.',
                Markup.keyboard([
                    ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É'],
                    ['üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥–∏'],
                    ['‚ùå –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É'],
                    ['‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                ]).resize()
            );
            return ctx.scene.leave();
        }
    },
    async (ctx) => {
        if (ctx.message?.text === '‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é') {
            return handleReturnToMainMenu(ctx);
        }
        if (!ctx.callbackQuery) return;

        const action = ctx.callbackQuery.data;

        if (action === 'cancel_delete') {
            await ctx.reply(
                '–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è.',
                Markup.keyboard([
                    ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É'],
                    ['üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥–∏'],
                    ['‚ùå –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É'],
                    ['‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                ]).resize()
            );
            return ctx.scene.leave();
        }

        if (action.startsWith('delete_service_')) {
            const serviceId = action.split('_')[2];
            try {
                await serviceService.deactivateService(serviceId);
                await ctx.answerCbQuery('–£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!');
                await ctx.reply(
                    '–£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!',
                    Markup.keyboard([
                        ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É'],
                        ['üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥–∏'],
                        ['‚ùå –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É'],
                        ['‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                    ]).resize()
                );
            } catch (error) {
                console.error('Error deleting service:', error);
                await ctx.answerCbQuery('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏');
                await ctx.reply(
                    '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏.',
                    Markup.keyboard([
                        ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É'],
                        ['üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥–∏'],
                        ['‚ùå –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É'],
                        ['‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                    ]).resize()
                );
            }
            return ctx.scene.leave();
        }
    }
);

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–º–µ–Ω—ã
addServiceScene.hears('‚ùå –û—Ç–º–µ–Ω–∞', async (ctx) => {
    ctx.session = ctx.session || {};
    ctx.session.currentRole = 'master';
    await ctx.reply(
        '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.',
        getMainMenuKeyboard('master')
    );
    return ctx.scene.leave();
});

deleteServiceScene.hears('‚ùå –û—Ç–º–µ–Ω–∞', async (ctx) => {
    await ctx.reply(
        '–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.',
        getMainMenuKeyboard('master')
    );
    return ctx.scene.leave();
});

addServiceScene.hears('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', async (ctx) => {
    ctx.session = ctx.session || {};
    ctx.session.currentRole = 'master';
    await ctx.reply(
        '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
        getMainMenuKeyboard('master')
    );
    return ctx.scene.leave();
});

editServicesScene.hears('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', async (ctx) => {
    ctx.session = ctx.session || {};
    ctx.session.currentRole = 'master';
    await ctx.reply(
        '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
        getMainMenuKeyboard('master')
    );
    return ctx.scene.leave();
});

deleteServiceScene.hears('‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', async (ctx) => {
    ctx.session = ctx.session || {};
    ctx.session.currentRole = 'master';
    await ctx.reply(
        '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
        getMainMenuKeyboard('master')
    );
    return ctx.scene.leave();
});

module.exports = {
    addServiceScene,
    editServicesScene,
    deleteServiceScene
}; 