const { Scenes, Markup } = require('telegraf');
const paymentService = require('../../../services/paymentService');
const reviewService = require('../../../services/reviewService');

const sessionCompletionScene = new Scenes.WizardScene(
    'sessionCompletion',
    // –®–∞–≥ 1: –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–µ–∞–Ω—Å–∞
    async (ctx) => {
        await ctx.reply(
            '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ —Å–µ–∞–Ω—Å –∑–∞–≤–µ—Ä—à–µ–Ω:',
            Markup.inlineKeyboard([
                [{ text: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é', callback_data: 'session_completed' }]
            ])
        );
        return ctx.wizard.next();
    },
    // –®–∞–≥ 2: –í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã
    async (ctx) => {
        if (!ctx.callbackQuery?.data === 'session_completed') return;

        await ctx.reply(
            '–ñ–µ–ª–∞–µ—Ç–µ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å—Å—è –∫–∞—Ä—Ç–æ–π?',
            Markup.inlineKeyboard([
                [{ text: '–î–∞', callback_data: 'pay_card' }],
                [{ text: '–ù–µ—Ç', callback_data: 'pay_cash' }]
            ])
        );
        return ctx.wizard.next();
    },
    // –®–∞–≥ 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–ª–∞—Ç—ã
    async (ctx) => {
        if (!ctx.callbackQuery) return;

        const paymentMethod = ctx.callbackQuery.data === 'pay_card' ? 'card' : 'cash';
        
        if (paymentMethod === 'card') {
            const paymentDetails = await paymentService.getPaymentDetails(ctx.scene.state.masterId);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π IBAN –æ—Ç–¥–µ–ª—å–Ω–æ
            if (paymentDetails?.iban) {
                for (const iban of paymentDetails.iban.split(',')) {
                    await ctx.reply(`IBAN –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n${iban.trim()}`);
                }
            }
        }

        await paymentService.confirmPayment(ctx.scene.state.appointmentId, paymentMethod);
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ü–µ–Ω–∫–µ
        await ctx.reply(
            '–û—Ü–µ–Ω–∏—Ç–µ, –∫–∞–∫ –ø—Ä–æ—à–µ–ª –≤–∞—à —Å–µ–∞–Ω—Å –æ—Ç 1 –¥–æ 5:',
            Markup.inlineKeyboard([
                [1, 2, 3, 4, 5].map(rating => ({
                    text: '‚≠ê'.repeat(rating),
                    callback_data: `rate_${rating}`
                }))
            ])
        );

        return ctx.wizard.next();
    },
    // –®–∞–≥ 4: –°–±–æ—Ä –æ—Ç–∑—ã–≤–∞
    async (ctx) => {
        if (!ctx.callbackQuery?.data.startsWith('rate_')) return;

        const rating = parseInt(ctx.callbackQuery.data.split('_')[1]);
        ctx.scene.state.rating = rating;

        await ctx.reply(
            '–ñ–µ–ª–∞–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –æ—Ç–∑—ã–≤—É?',
            Markup.inlineKeyboard([
                [{ text: '–î–∞', callback_data: 'add_review_comment' }],
                [{ text: '–ù–µ—Ç', callback_data: 'skip_review_comment' }]
            ])
        );

        return ctx.wizard.next();
    },
    // –®–∞–≥ 5: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –æ—Ç–∑—ã–≤—É
    async (ctx) => {
        if (ctx.callbackQuery?.data === 'skip_review_comment') {
            await finishReview(ctx);
            return ctx.scene.leave();
        } else if (ctx.callbackQuery?.data === 'add_review_comment') {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:');
            return ctx.wizard.next();
        }
    },
    // –®–∞–≥ 6: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞
    async (ctx) => {
        if (!ctx.message?.text) return;

        ctx.scene.state.reviewComment = ctx.message.text;
        await finishReview(ctx);
        return ctx.scene.leave();
    }
);

async function finishReview(ctx) {
    try {
        await reviewService.createReview(
            ctx.scene.state.appointmentId,
            ctx.scene.state.rating,
            ctx.scene.state.reviewComment
        );

        await ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ë—É–¥–µ–º —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å —Å–Ω–æ–≤–∞! üôè');
    } catch (error) {
        console.error('Error saving review:', error);
        await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞.');
    }
}

module.exports = { sessionCompletionScene };