const { Markup } = require('telegraf');
const loggingService = require('../../services/loggingService');
const moment = require('moment');

const registerLoggingHandlers = (bot) => {
    // –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤
    bot.command('logs', async (ctx) => {
        if (!ctx.session.isAdmin) {
            await ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        await ctx.reply(
            '–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤:',
            Markup.inlineKeyboard([
                [
                    { text: '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏', callback_data: 'logs_recent' },
                    { text: '–û—à–∏–±–∫–∏', callback_data: 'logs_errors' }
                ],
                [
                    { text: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', callback_data: 'logs_stats' },
                    { text: '–ü–æ–∏—Å–∫', callback_data: 'logs_search' }
                ]
            ])
        );
    });

    // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
    bot.action('logs_recent', async (ctx) => {
        try {
            const logs = await loggingService.getRecentLogs({ limit: 10 });
            
            if (logs.rows.length === 0) {
                await ctx.reply('–õ–æ–≥–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
                return;
            }

            for (const log of logs.rows) {
                const message = `
                    üìù –¢–∏–ø: ${log.type}
                    üïí –í—Ä–µ–º—è: ${moment(log.created_at).format('DD.MM.YYYY HH:mm:ss')}
                    üìÑ –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(log.data, null, 2)}
                `;

                await ctx.reply(message);
            }
        } catch (error) {
            await ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤');
        }
    });

    // –ü–æ–∏—Å–∫ –≤ –ª–æ–≥–∞—Ö
    bot.action('logs_search', async (ctx) => {
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:');
        ctx.session.awaitingLogSearch = true;
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    bot.on('text', async (ctx) => {
        if (ctx.session.awaitingLogSearch) {
            try {
                const logs = await loggingService.searchLogs(ctx.message.text);
                
                if (logs.rows.length === 0) {
                    await ctx.reply('–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
                    return;
                }

                for (const log of logs.rows) {
                    const message = `
                        üìù –¢–∏–ø: ${log.type}
                        üïí –í—Ä–µ–º—è: ${moment(log.created_at).format('DD.MM.YYYY HH:mm:ss')}
                        üìÑ –î–∞–Ω–Ω—ã–µ: ${JSON.stringify(log.data, null, 2)}
                    `;

                    await ctx.reply(message);
                }
            } catch (error) {
                await ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –ª–æ–≥–∞—Ö');
            }
            
            delete ctx.session.awaitingLogSearch;
        }
    });
};

module.exports = { registerLoggingHandlers }; 