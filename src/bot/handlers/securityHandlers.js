const { Markup } = require('telegraf');
const securityService = require('../../services/securityService');

const registerSecurityHandlers = (bot) => {
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é
    bot.command('security', async (ctx) => {
        if (!ctx.session.isAdmin) {
            await ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        await ctx.reply(
            '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é:',
            Markup.inlineKeyboard([
                [{ text: 'üîê –°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å', callback_data: 'change_password' }],
                [{ text: 'üì± –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏', callback_data: 'active_sessions' }],
                [{ text: 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ IP', callback_data: 'blocked_ips' }],
                [{ text: 'üìä –û—Ç—á–µ—Ç –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', callback_data: 'security_report' }]
            ])
        );
    });

    // –°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è
    bot.action('change_password', async (ctx) => {
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å:');
        ctx.session.awaitingOldPassword = true;
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª–µ–π
    bot.on('text', async (ctx) => {
        if (ctx.session.awaitingOldPassword) {
            ctx.session.oldPassword = ctx.message.text;
            await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:');
            ctx.session.awaitingOldPassword = false;
            ctx.session.awaitingNewPassword = true;
        } else if (ctx.session.awaitingNewPassword) {
            try {
                await securityService.updatePassword(
                    ctx.session.userId,
                    ctx.session.oldPassword,
                    ctx.message.text
                );
                await ctx.reply('–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!');
            } catch (error) {
                await ctx.reply(error.message);
            }
            
            delete ctx.session.oldPassword;
            delete ctx.session.awaitingNewPassword;
        }
    });

    // –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
    bot.action('active_sessions', async (ctx) => {
        try {
            const sessions = await securityService.getActiveSessions(ctx.session.userId);
            
            if (sessions.length === 0) {
                await ctx.reply('–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
                return;
            }

            for (const session of sessions) {
                const message = `
                    üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${session.device_info}
                    üåê IP: ${session.ip_address}
                    üïí –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: ${moment(session.last_activity).format('DD.MM.YYYY HH:mm')}
                `;

                await ctx.reply(
                    message,
                    Markup.inlineKeyboard([
                        [{ 
                            text: '‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é', 
                            callback_data: `terminate_session_${session.id}` 
                        }]
                    ])
                );
            }
        } catch (error) {
            await ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π');
        }
    });
};

module.exports = { registerSecurityHandlers }; 