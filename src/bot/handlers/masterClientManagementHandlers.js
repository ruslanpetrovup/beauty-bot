const { Markup } = require('telegraf');
const blockService = require('../../services/blockService');

const registerClientManagementHandlers = (bot) => {
    // –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
    bot.command('clients', async (ctx) => {
        const masterId = ctx.session.masterId;
        const clients = await getClientsList(masterId);
        
        for (const client of clients) {
            const isBlocked = await blockService.isClientBlocked(masterId, client.id);
            
            await ctx.reply(
                `üë§ –ö–ª–∏–µ–Ω—Ç: ${client.name}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: ${client.phone}`,
                Markup.inlineKeyboard([
                    [
                        {
                            text: isBlocked ? '‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' : '‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å',
                            callback_data: isBlocked ? 
                                `unblock_client_${client.id}` : 
                                `block_client_${client.id}`
                        }
                    ],
                    [
                        {
                            text: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
                            callback_data: `client_stats_${client.id}`
                        }
                    ]
                ])
            );
        }
    });

    // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
    bot.action(/^block_client_(\d+)$/, async (ctx) => {
        const clientId = ctx.match[1];
        await ctx.reply('–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:');
        ctx.session.blockingClientId = clientId;
        // –û–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏—á–∏–Ω–æ–π
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—á–∏–Ω—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    bot.on('text', async (ctx) => {
        if (ctx.session.blockingClientId) {
            const clientId = ctx.session.blockingClientId;
            const reason = ctx.message.text;
            
            await blockService.blockClient(ctx.session.masterId, clientId, reason);
            delete ctx.session.blockingClientId;
            
            await ctx.reply('–ö–ª–∏–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
        }
    });

    // –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞
    bot.action(/^unblock_client_(\d+)$/, async (ctx) => {
        const clientId = ctx.match[1];
        await blockService.unblockClient(ctx.session.masterId, clientId);
        await ctx.reply('–ö–ª–∏–µ–Ω—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω');
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–ª–∏–µ–Ω—Ç—É
    bot.action(/^client_stats_(\d+)$/, async (ctx) => {
        const clientId = ctx.match[1];
        const stats = await getClientStats(ctx.session.masterId, clientId);
        
        await ctx.reply(
            `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞:\n\n` +
            `–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: ${stats.totalAppointments}\n` +
            `–û—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: ${stats.cancelledAppointments}\n` +
            `–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞: ${stats.averageRating.toFixed(1)}‚≠ê\n` +
            `–ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: ${stats.lastVisit || '–ù–µ—Ç'}`
        );
    });
};

async function getClientsList(masterId) {
    const query = `
        SELECT DISTINCT 
            u.id, u.name, u.phone
        FROM appointments a
        JOIN users u ON a.client_id = u.id
        WHERE a.master_id = $1
        ORDER BY u.name
    `;
    const result = await db.query(query, [masterId]);
    return result.rows;
}

async function getClientStats(masterId, clientId) {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    // ...
}

module.exports = { registerClientManagementHandlers }; 