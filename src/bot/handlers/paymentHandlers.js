const { Markup } = require('telegraf');
const paymentService = require('../../services/paymentService');

const registerPaymentHandlers = (bot) => {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É
    bot.action(/^pay_appointment_(\d+)$/, async (ctx) => {
        const appointmentId = ctx.match[1];
        try {
            const appointment = await paymentService.getAppointmentDetails(appointmentId);
            
            await ctx.reply(
                `–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥–∏ "${appointment.service_name}"\n` +
                `–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: ${appointment.price} –≥—Ä–Ω\n\n` +
                '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:',
                Markup.inlineKeyboard([
                    [{ text: 'üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –∫–∞—Ä—Ç–æ–π', callback_data: `card_payment_${appointmentId}` }],
                    [{ text: 'üíµ –û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏', callback_data: `cash_payment_${appointmentId}` }]
                ])
            );
        } catch (error) {
            console.error('Error processing payment request:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.');
        }
    });

    // –û–ø–ª–∞—Ç–∞ –∫–∞—Ä—Ç–æ–π
    bot.action(/^card_payment_(\d+)$/, async (ctx) => {
        const appointmentId = ctx.match[1];
        try {
            const appointment = await paymentService.getAppointmentDetails(appointmentId);
            const paymentLink = await paymentService.createPaymentLink(
                appointmentId,
                appointment.price
            );

            await ctx.reply(
                '–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:',
                Markup.inlineKeyboard([
                    [{ text: 'üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ', url: paymentLink }]
                ])
            );
        } catch (error) {
            console.error('Error creating payment link:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É.');
        }
    });

    // –û–ø–ª–∞—Ç–∞ –Ω–∞–ª–∏—á–Ω—ã–º–∏
    bot.action(/^cash_payment_(\d+)$/, async (ctx) => {
        const appointmentId = ctx.match[1];
        try {
            await paymentService.confirmPayment(appointmentId, {
                status: 'pending',
                payment_method: 'cash'
            });

            await ctx.reply(
                '–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø–ª–∞—Ç—É –Ω–∞–ª–∏—á–Ω—ã–º–∏. –û–ø–ª–∞—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –Ω–∞ –º–µ—Å—Ç–µ.'
            );
        } catch (error) {
            console.error('Error processing cash payment:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞.');
        }
    });
};

module.exports = { registerPaymentHandlers }; 