const { Markup } = require('telegraf');
const integrationService = require('../../services/integrationService');
const backupService = require('../../services/backupService');

const registerSystemHandlers = (bot) => {
    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏
    bot.command('integrations', async (ctx) => {
        await ctx.reply(
            '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏:',
            Markup.inlineKeyboard([
                [{ text: 'Monobank', callback_data: 'connect_monobank' }],
                [{ text: 'Instagram', callback_data: 'connect_instagram' }],
                [{ text: 'Nova Poshta', callback_data: 'connect_novaposhta' }]
            ])
        );
    });

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Monobank
    bot.action('connect_monobank', async (ctx) => {
        await ctx.reply(
            '–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Monobank –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω API:\n' +
            '–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –º–æ–∂–Ω–æ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ https://api.monobank.ua/'
        );
        ctx.session.awaitingMonobankToken = true;
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–∫–µ–Ω–∞ Monobank
    bot.on('text', async (ctx) => {
        if (ctx.session.awaitingMonobankToken) {
            try {
                await integrationService.connectMonobank(
                    ctx.session.masterId,
                    ctx.message.text
                );
                await ctx.reply('Monobank —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω!');
            } catch (error) {
                await ctx.reply(error.message);
            }
            delete ctx.session.awaitingMonobankToken;
        }
    });

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏
    bot.command('backup', async (ctx) => {
        if (!ctx.session.isAdmin) {
            await ctx.reply('–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
            return;
        }

        await ctx.reply(
            '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ –∫–æ–ø–∏—è–º–∏:',
            Markup.inlineKeyboard([
                [{ text: '–°–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø', callback_data: 'create_backup' }],
                [{ text: '–°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤', callback_data: 'list_backups' }],
                [{ text: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', callback_data: 'restore_backup' }]
            ])
        );
    });

    // –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
    bot.action('create_backup', async (ctx) => {
        try {
            await ctx.reply('–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...');
            const filename = await backupService.createBackup();
            await ctx.reply(`–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è ${filename} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!`);
        } catch (error) {
            await ctx.reply('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏');
        }
    });

    // –°–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤
    bot.action('list_backups', async (ctx) => {
        try {
            const backups = await backupService.getBackupsList();
            
            if (backups.rows.length === 0) {
                await ctx.reply('–†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç');
                return;
            }

            const message = backups.rows.map(backup => 
                `üìÅ ${backup.filename}\n` +
                `üìÖ ${moment(backup.created_at).format('DD.MM.YYYY HH:mm')}\n` +
                `‚úÖ –°—Ç–∞—Ç—É—Å: ${backup.status}\n`
            ).join('\n');

            await ctx.reply(message);
        } catch (error) {
            await ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã—Ö –∫–æ–ø–∏–π');
        }
    });
};

module.exports = { registerSystemHandlers }; 