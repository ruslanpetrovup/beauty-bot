const { Markup } = require('telegraf');
const calendarService = require('../../services/calendarService');
const broadcastService = require('../../services/broadcastService');

const registerCalendarHandlers = (bot) => {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Google Calendar
    bot.command('connect_calendar', async (ctx) => {
        try {
            const authUrl = await calendarService.generateAuthUrl(ctx.session.masterId);
            
            await ctx.reply(
                '–î–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Google Calendar –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:',
                Markup.inlineKeyboard([
                    [{ text: '–ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å', url: authUrl }]
                ])
            );
        } catch (error) {
            console.error('Error generating auth URL:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è.');
        }
    });

    // –≠–∫—Å–ø–æ—Ä—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    bot.command('export_calendar', async (ctx) => {
        await ctx.reply(
            '–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:',
            Markup.inlineKeyboard([
                [
                    { text: '–ù–µ–¥–µ–ª—è', callback_data: 'export_week' },
                    { text: '–ú–µ—Å—è—Ü', callback_data: 'export_month' }
                ]
            ])
        );
    });

    // –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
    bot.command('create_broadcast', async (ctx) => {
        await ctx.reply(
            '–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π:',
            Markup.inlineKeyboard([
                [{ text: '–í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã', callback_data: 'broadcast_all' }],
                [{ text: '–ù–µ–¥–∞–≤–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—ã', callback_data: 'broadcast_recent' }],
                [{ text: '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–ø–∏—Å–∏', callback_data: 'broadcast_upcoming' }]
            ])
        );
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    bot.action(/^broadcast_(.+)$/, async (ctx) => {
        const targetGroup = ctx.match[1];
        ctx.session.broadcastTarget = targetGroup;
        
        await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:');
        ctx.session.awaitingBroadcastMessage = true;
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
    bot.on('text', async (ctx) => {
        if (ctx.session.awaitingBroadcastMessage) {
            try {
                const broadcast = await broadcastService.createBroadcast(
                    ctx.session.masterId,
                    ctx.message.text,
                    { targetGroup: ctx.session.broadcastTarget }
                );

                await ctx.reply('–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø—É—â–µ–Ω–∞!');
                
                // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                delete ctx.session.awaitingBroadcastMessage;
                delete ctx.session.broadcastTarget;
            } catch (error) {
                console.error('Error creating broadcast:', error);
                await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏.');
            }
        }
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫
    bot.command('broadcast_stats', async (ctx) => {
        try {
            const stats = await broadcastService.getBroadcastStats(ctx.session.masterId);
            
            await ctx.reply(
                `üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫:\n\n` +
                `–í—Å–µ–≥–æ —Ä–∞—Å—Å—ã–ª–æ–∫: ${stats.total_broadcasts}\n` +
                `–£—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${stats.total_delivered}\n` +
                `–û—à–∏–±–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏: ${stats.total_failed}\n` +
                `–°—Ä–µ–¥–Ω–∏–π % —É—Å–ø–µ—Ö–∞: ${(stats.average_success_rate * 100).toFixed(1)}%`
            );
        } catch (error) {
            console.error('Error getting broadcast stats:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.');
        }
    });
};

module.exports = { registerCalendarHandlers }; 