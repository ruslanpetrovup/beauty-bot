const { Markup } = require('telegraf');
const businessManagementService = require('../../services/businessManagementService');
const reportingService = require('../../services/reportingService');

const registerBusinessManagementHandlers = (bot) => {
    // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    bot.command('manage_business', async (ctx) => {
        await ctx.reply(
            '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∏–∑–Ω–µ—Å–æ–º:',
            Markup.keyboard([
                ['üìä –û—Ç—á–µ—Ç—ã', 'üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏'],
                ['üì¶ –°–∫–ª–∞–¥', 'üí∞ –§–∏–Ω–∞–Ω—Å—ã'],
                ['–ù–∞–∑–∞–¥']
            ]).resize()
        );
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ—Ç—á–µ—Ç–∞
    bot.hears('üìä –û—Ç—á–µ—Ç—ã', async (ctx) => {
        await ctx.reply(
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á–µ—Ç–∞:',
            Markup.inlineKeyboard([
                [
                    { text: '–ó–∞ –¥–µ–Ω—å', callback_data: 'report_day' },
                    { text: '–ó–∞ –Ω–µ–¥–µ–ª—é', callback_data: 'report_week' }
                ],
                [
                    { text: '–ó–∞ –º–µ—Å—è—Ü', callback_data: 'report_month' },
                    { text: '–ó–∞ –≥–æ–¥', callback_data: 'report_year' }
                ],
                [{ text: '–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç', callback_data: 'report_detailed' }]
            ])
        );
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç—á–µ—Ç–∞
    bot.action(/^report_(.+)$/, async (ctx) => {
        const period = ctx.match[1];
        try {
            if (period === 'detailed') {
                const fileName = await reportingService.generateDetailedReport(
                    ctx.session.masterId,
                    {
                        dateFrom: moment().subtract(1, 'month').startOf('month'),
                        dateTo: moment().endOf('month')
                    }
                );
                
                await ctx.replyWithDocument({
                    source: `./reports/${fileName}`,
                    filename: '–î–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç.xlsx'
                });
            } else {
                const report = await businessManagementService.getFinancialReport(
                    ctx.session.masterId,
                    period
                );
                
                await sendFinancialReport(ctx, report.rows, period);
            }
        } catch (error) {
            console.error('Error generating report:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞.');
        }
    });

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏
    bot.hears('üë• –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏', async (ctx) => {
        await ctx.reply(
            '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º–∏:',
            Markup.inlineKeyboard([
                [{ text: '–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞', callback_data: 'add_employee' }],
                [{ text: '–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤', callback_data: 'list_employees' }],
                [{ text: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–±–æ—Ç—ã', callback_data: 'employee_stats' }]
            ])
        );
    });
};

async function sendFinancialReport(ctx, data, period) {
    const periodText = {
        day: '–¥–µ–Ω—å',
        week: '–Ω–µ–¥–µ–ª—é',
        month: '–º–µ—Å—è—Ü',
        year: '–≥–æ–¥'
    }[period];

    const message = `
        üìä –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á–µ—Ç –∑–∞ ${periodText}:

        üí∞ –û–±—â–∏–π –¥–æ—Ö–æ–¥: ${data.total_revenue} –≥—Ä–Ω
        üìâ –†–∞—Å—Ö–æ–¥—ã: ${data.total_expenses} –≥—Ä–Ω
        üìà –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: ${data.net_profit} –≥—Ä–Ω
        
        üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${data.unique_clients}
        üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: ${data.total_appointments}
        üíµ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: ${data.average_check} –≥—Ä–Ω
    `;

    await ctx.reply(message);
}

module.exports = { registerBusinessManagementHandlers }; 