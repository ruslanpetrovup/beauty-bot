const { Markup } = require('telegraf');
const { getMainMenuKeyboard } = require('../keyboards');

const registerMasterHandlers = (bot) => {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏"
    bot.hears('üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏', async (ctx) => {
        try {
            ctx.session = ctx.session || {};
            ctx.session.currentRole = 'master';
            await ctx.reply(
                '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                Markup.keyboard([
                    ['‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É'],
                    ['üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥–∏'],
                    ['‚ùå –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É'],
                    ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                ]).resize()
            );
        } catch (error) {
            console.error('Error in service management:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ú–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã"
    bot.hears('üìÖ –ú–æ–∏ –∫–ª–∏–µ–Ω—Ç—ã', async (ctx) => {
        try {
            ctx.session.currentRole = 'master';
            await ctx.reply(
                '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                Markup.keyboard([
                    ['üìÖ –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–∞–ø–∏—Å–∏'],
                    ['üìä –í—Å–µ –∑–∞–ø–∏—Å–∏'],
                    ['üîç –ü–æ–∏—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞'],
                    ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                ]).resize()
            );
        } catch (error) {
            console.error('Error in client management:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
    bot.hears('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏', async (ctx) => {
        try {
            ctx.session.currentRole = 'master';
            await ctx.reply(
                '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:',
                Markup.keyboard([
                    ['üïí –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è'],
                    ['üí∞ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø–ª–∞—Ç—ã'],
                    ['üìç –ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å'],
                    ['‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'],
                    ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                ]).resize()
            );
        } catch (error) {
            console.error('Error in settings:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏
    bot.hears('‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É', async (ctx) => {
        try {
            await ctx.scene.enter('addService');
        } catch (error) {
            console.error('Error entering add service scene:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å–ª—É–≥
    bot.hears('üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É—Å–ª—É–≥–∏', async (ctx) => {
        try {
            await ctx.scene.enter('editServices');
        } catch (error) {
            console.error('Error entering edit services scene:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏
    bot.hears('‚ùå –£–¥–∞–ª–∏—Ç—å —É—Å–ª—É–≥—É', async (ctx) => {
        try {
            await ctx.scene.enter('deleteService');
        } catch (error) {
            console.error('Error entering delete service scene:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–∞–ø–∏—Å–∏"
    bot.hears('üìÖ –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ –∑–∞–ø–∏—Å–∏', async (ctx) => {
        try {
            await ctx.scene.enter('viewAppointments', { filter: 'today' });
        } catch (error) {
            console.error('Error viewing today appointments:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ "–í—Å–µ –∑–∞–ø–∏—Å–∏"
    bot.hears('üìä –í—Å–µ –∑–∞–ø–∏—Å–∏', async (ctx) => {
        try {
            await ctx.scene.enter('viewAppointments', { filter: 'all' });
        } catch (error) {
            console.error('Error viewing all appointments:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    });
};

module.exports = { registerMasterHandlers }; 