const { Markup } = require('telegraf');
const clientService = require('../../services/clientService');
const moment = require('moment');
const userService = require('../../services/userService');
const { getMainMenuKeyboard } = require('../keyboards');
const serviceService = require('../../services/serviceService');
const appointmentService = require('../../services/appointmentService');

const registerClientHandlers = (bot) => {
    // –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–ø–∏—Å–µ–π
    bot.command('my_appointments', async (ctx) => {
        try {
            const appointments = await clientService.getUpcomingAppointments(ctx.from.id);
            
            if (appointments.rows.length === 0) {
                await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–ø–∏—Å–µ–π.');
                return;
            }

            for (const apt of appointments.rows) {
                const message = `
                    üìÖ –ó–∞–ø–∏—Å—å –Ω–∞ ${moment(apt.start_time).format('DD.MM.YYYY HH:mm')}
                    
                    üë§ –ú–∞—Å—Ç–µ—Ä: ${apt.master_name}
                    üè† –°–∞–ª–æ–Ω: ${apt.salon_name}
                    üìç –ê–¥—Ä–µ—Å: ${apt.address}
                    üíá –£—Å–ª—É–≥–∞: ${apt.service_name}
                    üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${apt.price} –≥—Ä–Ω
                `;

                await ctx.reply(
                    message,
                    Markup.inlineKeyboard([
                        [
                            { 
                                text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', 
                                callback_data: `cancel_apt_${apt.id}` 
                            },
                            { 
                                text: 'üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏', 
                                callback_data: `reschedule_apt_${apt.id}` 
                            }
                        ]
                    ])
                );
            }
        } catch (error) {
            console.error('Error getting appointments:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π.');
        }
    });

    // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä–∞–º–∏
    bot.command('my_masters', async (ctx) => {
        try {
            const masters = await clientService.getFavoriteMasters(ctx.from.id);
            
            if (masters.rows.length === 0) {
                await ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º–∞—Å—Ç–µ—Ä–æ–≤.');
                return;
            }

            for (const master of masters.rows) {
                const message = `
                    üë§ ${master.master_name}
                    üè† ${master.salon_name}
                    üìç ${master.address}
                    ‚≠ê –†–µ–π—Ç–∏–Ω–≥: ${master.rating}
                    üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏–∑–∏—Ç–æ–≤: ${master.visit_count}
                    üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–∑–∏—Ç: ${moment(master.last_visit).format('DD.MM.YYYY')}
                `;

                await ctx.reply(
                    message,
                    Markup.inlineKeyboard([
                        [
                            { 
                                text: 'üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è', 
                                callback_data: `book_master_${master.id}` 
                            },
                            { 
                                text: '‚ùå –£–¥–∞–ª–∏—Ç—å', 
                                callback_data: `remove_master_${master.id}` 
                            }
                        ]
                    ])
                );
            }
        } catch (error) {
            console.error('Error getting masters:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤.');
        }
    });

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
    bot.command('preferences', async (ctx) => {
        try {
            const preferences = await clientService.getClientPreferences(ctx.from.id);
            
            await ctx.reply(
                '–ù–∞—Å—Ç—Ä–æ–π–∫–∏:',
                Markup.keyboard([
                    ['üïí –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è'],
                    ['üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è'],
                    ['üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã'],
                    ['–ù–∞–∑–∞–¥']
                ]).resize()
            );
        } catch (error) {
            console.error('Error getting preferences:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫.');
        }
    });

    // –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É
    bot.hears('üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É', async (ctx) => {
        console.log('Booking service button pressed');
        try {
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Å—Ç–µ—Ä–æ–≤
            const mastersExist = await serviceService.checkMastersExist();
            if (!mastersExist) {
                await ctx.reply('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
                return;
            }

            await ctx.reply(
                '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥:',
                Markup.keyboard([
                    ['üíÖ –ú–∞–Ω–∏–∫—é—Ä', 'üíá‚Äç‚ôÄÔ∏è –°—Ç—Ä–∏–∂–∫–∞'],
                    ['üíÜ‚Äç‚ôÄÔ∏è –ú–∞—Å—Å–∞–∂', 'üíÑ –ú–∞–∫–∏—è–∂'],
                    ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                ]).resize()
            );
        } catch (error) {
            console.error('Error getting service categories:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥ (–∏—Å–ø–æ–ª—å–∑—É–µ–º hears –≤–º–µ—Å—Ç–æ action)
    bot.hears(['üíÖ –ú–∞–Ω–∏–∫—é—Ä', 'üíá‚Äç‚ôÄÔ∏è –°—Ç—Ä–∏–∂–∫–∞', 'üíÜ‚Äç‚ôÄÔ∏è –ú–∞—Å—Å–∞–∂', 'üíÑ –ú–∞–∫–∏—è–∂'], async (ctx) => {
        try {
            const categoryName = ctx.message.text;
            const masters = await serviceService.getMastersByCategory(categoryName);
            
            if (!masters || masters.length === 0) {
                await ctx.reply(
                    '–í –¥–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤.',
                    Markup.keyboard([
                        ['üíÖ –ú–∞–Ω–∏–∫—é—Ä', 'üíá‚Äç‚ôÄÔ∏è –°—Ç—Ä–∏–∂–∫–∞'],
                        ['üíÜ‚Äç‚ôÄÔ∏è –ú–∞—Å—Å–∞–∂', 'üíÑ –ú–∞–∫–∏—è–∂'],
                        ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                    ]).resize()
                );
                return;
            }

            const keyboard = masters.map(master => ([master.name]));
            keyboard.push(['‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º']);

            await ctx.reply(
                '–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:',
                Markup.keyboard(keyboard).resize()
            );
        } catch (error) {
            console.error('Error getting masters:', error);
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–∞—Å—Ç–µ—Ä–æ–≤.');
        }
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"
    bot.action('back_to_categories', async (ctx) => {
        await ctx.answerCbQuery();
        // –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É"
        await bot.hears['üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É'](ctx);
    });

    // 2. –ú–æ–∏ –∑–∞–ø–∏—Å–∏
    bot.hears('üìÖ –ú–æ–∏ –∑–∞–ø–∏—Å–∏', async (ctx) => {
        console.log('My appointments button pressed');
        await ctx.reply(
            '–í–∞—à–∏ –∑–∞–ø–∏—Å–∏:',
            Markup.inlineKeyboard([
                [{ text: '–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏', callback_data: 'active_appointments' }],
                [{ text: '–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π', callback_data: 'appointment_history' }],
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
            ])
        );
    });

    // 3. –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞
    bot.hears('‚≠êÔ∏è –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞', async (ctx) => {
        console.log('Favorite masters button pressed');
        await ctx.reply(
            '–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä–∞:',
            Markup.inlineKeyboard([
                [{ text: '–î–æ–±–∞–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä–∞', callback_data: 'add_favorite_master' }],
                [{ text: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫', callback_data: 'view_favorite_masters' }],
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
            ])
        );
    });

    // 4. –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
    bot.hears('üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', async (ctx) => {
        console.log('My profile button pressed');
        try {
            const user = await userService.getUserByTelegramId(ctx.from.id);
            
            if (!user) {
                await ctx.reply(
                    '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.',
                    Markup.keyboard([
                        ['üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'],
                        ['‚ùå –û—Ç–º–µ–Ω–∞']
                    ]).resize()
                );
                return;
            }

            const profileText = `
üë§ *–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:*
üìã –ò–º—è: ${user.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone || '–ù–µ —É–∫–∞–∑–∞–Ω'}
üïí –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${new Date(user.created_at).toLocaleDateString()}`;

            await ctx.reply(profileText, {
                parse_mode: 'Markdown',
                ...Markup.keyboard([
                    ['‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'],
                    ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                ]).resize()
            });
        } catch (error) {
            console.error('Error getting profile:', error);
            await ctx.reply(
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                Markup.keyboard([
                    ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                ]).resize()
            );
        }
    });

    // 5. –ü–æ–¥–¥–µ—Ä–∂–∫–∞
    bot.hears('üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞', async (ctx) => {
        console.log('Support button pressed');
        await ctx.reply(
            '–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n' +
            '1. –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º: @support_username\n' +
            '2. –ü–æ–∑–≤–æ–Ω–∏—Ç–µ: +7 (XXX) XXX-XX-XX\n' +
            '3. –ò–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä—è–º–æ –∑–¥–µ—Å—å',
            Markup.inlineKeyboard([
                [{ text: '‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ', callback_data: 'write_support' }],
                [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data: 'back_to_main' }]
            ])
        );
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_data
    bot.action('back_to_main', async (ctx) => {
        await ctx.answerCbQuery();
        await ctx.reply(
            '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:',
            getMainMenuKeyboard('client')
        );
    });

    // –î–æ–±–∞–≤—å—Ç–µ –∑–¥–µ—Å—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö callback_data
    bot.action('active_appointments', async (ctx) => {
        await ctx.answerCbQuery();
        await ctx.reply('–ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏...');
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
    });

    bot.action('appointment_history', async (ctx) => {
        await ctx.answerCbQuery();
        await ctx.reply('–ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø–∏—Å–µ–π...');
        // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø–∏—Å–µ–π
    });

    bot.action('edit_profile', async (ctx) => {
        await ctx.answerCbQuery();
        await ctx.scene.enter('editProfile');
    });

    bot.action('write_support', async (ctx) => {
        await ctx.answerCbQuery();
        await ctx.reply(
            '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å. –ú—ã –æ—Ç–≤–µ—Ç–∏–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.',
            Markup.keyboard([['‚ùå –û—Ç–º–µ–Ω–∏—Ç—å']]).resize()
        );
        // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
    bot.hears('üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', async (ctx) => {
        console.log('Registration button pressed');
        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            const existingUser = await userService.getUserByTelegramId(ctx.from.id);
            if (existingUser) {
                await ctx.reply(
                    '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!',
                    Markup.keyboard([
                        ['üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'],
                        ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                    ]).resize()
                );
                return;
            }

            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º —Å—Ü–µ–Ω—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            await ctx.scene.enter('clientRegistration');
        } catch (error) {
            console.error('Error starting registration:', error);
            await ctx.reply(
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—á–∞–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                Markup.keyboard([
                    ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                ]).resize()
            );
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞"
    bot.hears('‚ùå –û—Ç–º–µ–Ω–∞', async (ctx) => {
        await ctx.reply(
            '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.',
            getMainMenuKeyboard('client')
        );
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"
    bot.hears('‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å', async (ctx) => {
        console.log('Edit profile button pressed');
        try {
            const user = await userService.getUserByTelegramId(ctx.from.id);
            
            if (!user) {
                await ctx.reply(
                    '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å–Ω–∞—á–∞–ª–∞.',
                    Markup.keyboard([
                        ['üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'],
                        ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                    ]).resize()
                );
                return;
            }

            // –í—Ö–æ–¥–∏–º –≤ —Å—Ü–µ–Ω—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
            await ctx.scene.enter('editProfile');
        } catch (error) {
            console.error('Error starting profile edit:', error);
            await ctx.reply(
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
                Markup.keyboard([
                    ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é']
                ]).resize()
            );
        }
    });
};

module.exports = { registerClientHandlers }; 