const db = require('../database/db');
const bot = require('../bot/bot');

class ReviewNotificationService {
    async handleNewReview(review) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏ –∏ –º–∞—Å—Ç–µ—Ä–∞
            const appointmentDetails = await this.getAppointmentDetails(review.appointment_id);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä—É
            await this.notifyMaster(appointmentDetails, review);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–∞—Å—Ç–µ—Ä–∞
            await this.updateMasterStatistics(appointmentDetails.master_id);
            
            // –ï—Å–ª–∏ –æ—Ü–µ–Ω–∫–∞ –Ω–∏–∑–∫–∞—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            if (review.rating <= 3) {
                await this.notifyAboutLowRating(appointmentDetails, review);
            }
        } catch (error) {
            console.error('Error handling new review:', error);
        }
    }

    async notifyMaster(appointment, review) {
        const message = `
            üåü –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤!

            –ö–ª–∏–µ–Ω—Ç: ${appointment.client_name}
            –£—Å–ª—É–≥–∞: ${appointment.service_name}
            –î–∞—Ç–∞: ${appointment.formatted_date}
            
            –û—Ü–µ–Ω–∫–∞: ${'‚≠ê'.repeat(review.rating)}
            ${review.comment ? `\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${review.comment}` : ''}
        `;

        await bot.telegram.sendMessage(
            appointment.master_telegram_id,
            message,
            {
                reply_markup: {
                    inline_keyboard: [[
                        {
                            text: '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –æ—Ç–∑—ã–≤—ã',
                            callback_data: 'view_all_reviews'
                        }
                    ]]
                }
            }
        );
    }

    async notifyAboutLowRating(appointment, review) {
        const adminMessage = `
            ‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ü–æ–ª—É—á–µ–Ω –Ω–∏–∑–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥!

            –ú–∞—Å—Ç–µ—Ä: ${appointment.master_name}
            –ö–ª–∏–µ–Ω—Ç: ${appointment.client_name}
            –£—Å–ª—É–≥–∞: ${appointment.service_name}
            –î–∞—Ç–∞: ${appointment.formatted_date}
            
            –û—Ü–µ–Ω–∫–∞: ${review.rating}/5
            ${review.comment ? `\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${review.comment}` : ''}
        `;

        // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        if (process.env.ADMIN_TELEGRAM_ID) {
            await bot.telegram.sendMessage(
                process.env.ADMIN_TELEGRAM_ID,
                adminMessage
            );
        }
    }

    async updateMasterStatistics(masterId) {
        const query = `
            WITH stats AS (
                SELECT 
                    COUNT(*) as total_reviews,
                    AVG(r.rating) as average_rating,
                    COUNT(CASE WHEN r.rating = 5 THEN 1 END) as five_star_reviews
                FROM reviews r
                JOIN appointments a ON r.appointment_id = a.id
                WHERE a.master_id = $1
            )
            UPDATE masters
            SET 
                review_count = stats.total_reviews,
                average_rating = stats.average_rating,
                five_star_count = stats.five_star_reviews
            FROM stats
            WHERE id = $1
            RETURNING *
        `;

        return db.query(query, [masterId]);
    }

    async getAppointmentDetails(appointmentId) {
        const query = `
            SELECT 
                a.*,
                u.name as client_name,
                mu.name as master_name,
                mu.telegram_id as master_telegram_id,
                s.name as service_name,
                to_char(a.start_time, 'DD.MM.YYYY HH24:MI') as formatted_date
            FROM appointments a
            JOIN users u ON a.client_id = u.id
            JOIN masters m ON a.master_id = m.id
            JOIN users mu ON m.user_id = mu.id
            JOIN services s ON a.service_id = s.id
            WHERE a.id = $1
        `;

        const result = await db.query(query, [appointmentId]);
        return result.rows[0];
    }
}

module.exports = new ReviewNotificationService(); 